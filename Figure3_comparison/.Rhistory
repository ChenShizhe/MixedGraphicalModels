library(glasso)
p<-20
q<-20
total<-100
lambda<-exp(-seq(from= 4, to= -6, length.out=total))
size<-200
rho.vec<-sqrt(2*log(p)/size)*lambda/2
p<-20
q<-20
total<-100
lambda<-exp(-seq(from= 4, to= -6, length.out=total))
size<-200
rho.vec<-sqrt(2*log(p)/size)*lambda/2
M1<-5
M2<-3
for( iterg in 1:M1){
B<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 B",iterg, ".csv",sep=""),header=F))
P<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 P",iterg, ".csv",sep=""),header=F))
Phi<-as.matrix(read.csv(file=paste("./Graph/graphGB", "20 Phi",iterg, ".csv",sep=""),header=F))
count<-0
evaluation_or<-replicate(total,matrix(0,M2,8))
for(iter in 1:M2){
sample_all<-as.matrix(read.table(file=paste("./Data/sample20GB", iterg, "N400", iter,".txt",sep="" )))
sample_limited<-sample_all[1:size,]
if(is_same(sample_limited)==TRUE){
} else {
count<-count+1
sample_limited<-sample_limited-rep(1,size)%*%t(apply(sample_limited,2,mean))
sample_limited<-sign(sample_limited)
sds<-as.numeric(apply(sample_limited, 2, sd))
est_path<-Ising(dat=sample_limited,p=p,q=q, clambda.g=lambda, pf=T, pw=sds)
for(j in 1: total){
ggraph<-est_path[,,j]
est<-combine(ggraph,p=p,q=q, cd='or', cc='or',dd='or')
evaluation_or[iter,,j]<-c(Eva_count(B=B,P=P,Phi=Phi,Est=est,reverse=F), Eva_total(B=B,P=P,Phi=Phi,Est=est,reverse=F))
}
}
}
result<-edge_aver(edges=evaluation_or, count=count)
write.table(result, file=paste("./Estimates/Ising/G", iterg, "I_or.txt",sep=""))
}
est_path<-neighbour_Ising(dat=sample_limited,p=p,q=q, clambda.g=lambda, pf=T, pw=sds)
est_path<-neighbour_Ising(dat=sample_limited,p=p,q=q, clambda=lambda, pf=T, pw=sds)
source("../Sources/MGM_NSelect.r")
est_path<-neighbour_Ising(dat=sample_limited,p=p,q=q, clambda=lambda, pf=T, pw=sds)
p<-20
q<-20
total<-100
lambda<-exp(-seq(from= 4, to= -6, length.out=total))
size<-200
rho.vec<-sqrt(2*log(p)/size)*lambda/2
M1<-5
M2<-3
for( iterg in 1:M1){
B<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 B",iterg, ".csv",sep=""),header=F))
P<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 P",iterg, ".csv",sep=""),header=F))
Phi<-as.matrix(read.csv(file=paste("./Graph/graphGB", "20 Phi",iterg, ".csv",sep=""),header=F))
count<-0
evaluation_or<-replicate(total,matrix(0,M2,8))
for(iter in 1:M2){
sample_all<-as.matrix(read.table(file=paste("./Data/sample20GB", iterg, "N400", iter,".txt",sep="" )))
sample_limited<-sample_all[1:size,]
if(is_same(sample_limited)==TRUE){
} else {
count<-count+1
sample_limited<-sample_limited-rep(1,size)%*%t(apply(sample_limited,2,mean))
sample_limited<-sign(sample_limited)
sds<-as.numeric(apply(sample_limited, 2, sd))
est_path<-neighbour_Ising(dat=sample_limited,p=p,q=q, clambda=lambda, pf=T, pw=sds)
for(j in 1: total){
ggraph<-est_path[,,j]
est<-combine(ggraph,p=p,q=q, cd='or', cc='or',dd='or')
evaluation_or[iter,,j]<-c(Eva_count(B=B,P=P,Phi=Phi,Est=est,reverse=F), Eva_total(B=B,P=P,Phi=Phi,Est=est,reverse=F))
}
}
}
result<-edge_aver(edges=evaluation_or, count=count)
write.table(result, file=paste("./Estimates/Ising/G", iterg, "I_or.txt",sep=""))
}
# ####################
# #  M & B 2006      #
# ####################
for( iterg in 1:M1){
B<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 B",iterg, ".csv",sep=""),header=F))
P<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 P",iterg, ".csv",sep=""),header=F))
Phi<-as.matrix(read.csv(file=paste("./Graph/graphGB", "20 Phi",iterg, ".csv",sep=""),header=F))
count<-0
evaluation_or<-replicate(total,matrix(0,M2,8))
for(iter in 1:M2){
sample_all<-as.matrix(read.table(file=paste("./Data/sample20GB", iterg, "N400", iter,".txt",sep="" )))
sample_limited<-sample_all[1:size,]
if(is_same(sample_limited)==TRUE){
} else {
count<-count+1
sds<-as.numeric(apply(sample_limited, 2, sd))
est_path<-neighbour_Gaussian(dat=sample_limited,p=p,q=q,
clambda=lambda, pf=T, pw=sds)
for(j in 1: total){
ggraph<-est_path[,,j]
est<-combine(ggraph,p=p,q=q, cd='or', cc='or',dd='or')
evaluation_or[iter,,j]<-c(Eva_count(B=B,P=P,Phi=Phi,Est=est,reverse=F), Eva_total(B=B,P=P,Phi=Phi,Est=est,reverse=F))
}
}
}
result<-edge_aver(edges=evaluation_or, count=count)
write.table(result, file=paste("./Estimates/MB/G", iterg, "MB_or.txt",sep=""))
}
source("../Sources/MGM_NSelect.r")
# ####################
# #  M & B 2006      #
# ####################
for( iterg in 1:M1){
B<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 B",iterg, ".csv",sep=""),header=F))
P<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 P",iterg, ".csv",sep=""),header=F))
Phi<-as.matrix(read.csv(file=paste("./Graph/graphGB", "20 Phi",iterg, ".csv",sep=""),header=F))
count<-0
evaluation_or<-replicate(total,matrix(0,M2,8))
for(iter in 1:M2){
sample_all<-as.matrix(read.table(file=paste("./Data/sample20GB", iterg, "N400", iter,".txt",sep="" )))
sample_limited<-sample_all[1:size,]
if(is_same(sample_limited)==TRUE){
} else {
count<-count+1
sds<-as.numeric(apply(sample_limited, 2, sd))
est_path<-neighbour_Gaussian(dat=sample_limited,p=p,q=q,
clambda=lambda, pf=T, pw=sds)
for(j in 1: total){
ggraph<-est_path[,,j]
est<-combine(ggraph,p=p,q=q, cd='or', cc='or',dd='or')
evaluation_or[iter,,j]<-c(Eva_count(B=B,P=P,Phi=Phi,Est=est,reverse=F), Eva_total(B=B,P=P,Phi=Phi,Est=est,reverse=F))
}
}
}
result<-edge_aver(edges=evaluation_or, count=count)
write.table(result, file=paste("./Estimates/MB/G", iterg, "MB_or.txt",sep=""))
}
####################
for( iterg in 1:M1){
B<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 B",iterg, ".csv",sep=""),header=F))
P<-as.matrix(read.csv(file=paste("./Graph/graphGB",  "20 P",iterg, ".csv",sep=""),header=F))
Phi<-as.matrix(read.csv(file=paste("./Graph/graphGB", "20 Phi",iterg, ".csv",sep=""),header=F))
count<-0
evaluation<-replicate(total,matrix(0,M2,8))
for(iter in 1:M2){
sample_all<-as.matrix(read.table(file=paste("./Data/sample20GB", iterg, "N400", iter,".txt",sep="" )))
sample_limited<-sample_all[1:size,]
if(is_same(sample_limited)==TRUE){
} else {
count<-count+1
est_path<-glassopath(s=cor(sample_limited)*(size-1)/size, rholist=rho.vec, approx=F, penalize.diagonal=F,thr=1e-07)
for(j in 1: total){
ggraph<-abs(est_path$wi[,,j])
est<-combine(ggraph,p=p,q=q,cd='node', cc='or',dd='or')
evaluation[iter,,j]<-c(Eva_count(B=B,P=P,Phi=Phi,Est=est,reverse=F), Eva_total(B=B,P=P,Phi=Phi,Est=est,reverse=F))
}
}
}
result<-edge_aver(edges=evaluation, count=count)
write.table(result, file=paste("./Estimates/Glasso/G", iterg, "GR.txt",sep=""))
}
M1<-5
edgeMGM_ratio<-process(st1="./Estimates/MGM/G", st2="MGM_ratio.txt",range=(1:M1) )
edgeGR<-process(st1="./Estimates/Glasso/G", st2="GR.txt",range=(1:M1) )
edgeMB_or<-process(st1="./Estimates/MB/G", st2="MB_or.txt",range=(1:M1) )
edgeI_or<-process(st1="./Estimates/Ising/G", st2="I_or.txt",range=(1:M1) )
BIC_count<-process(st1="./Estimates/BIC/G", st2="BICcount200.txt",range=(1:M1) )
BIC_rate<-process(st1="./Estimates/BIC/G", st2="BICrate200.txt",range=(1:M1) )
#Precision and recall rates
BIC_rate
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of total estimated edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38),
xlab="Number of total estimated edges", col="black", lwd=4, yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)
par(mfrow=c(1,1))
par(mar=c(4,3.6,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of total estimated edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Number of true edges", side=2, line=2.2,cex=2.2)
mtext('Edges between Gaussian and binary nodes', outer=T, line=-2.8,cex=2.3)
dev.off()
## plot of edges of the same type
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
pdf(file = paste("./plots/GB-same.pdf",sep=""), width=8, height=6)
par(mar=c(4,3.6,4,0.3)) # Margins
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38),
xlab="Number of total estimated edges", col="black", lwd=4, yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Number of true edges", side=2, line=2.2,cex=2.2)
mtext('Edges between same types of nodes', outer=T, line=-2.8,cex=2.3)
dev.off()
source("../Sources/MGM_Graph.r")
source("./GB_Graph.r")
source("../Sources/MGM_Graph.r")
source("./GB_Graph.r")
source("../Sources/MGM_Sampler.r")
source("./GB_Data.r")
source("../Sources/MGM_Evaluation.r")
source("../Sources/MGM_Combine.r")
source("../Sources/MGM_BIC.r")
source("../Sources/MGM_NSelect.r")
source("../Sources/MGM_misc.r")
source("./GB_Comp.r")
library(glmnet)
M1<-5 # Number of graphs
M2<-3 # Number of datasets for each graph
size<-200
source("../Sources/MGM_Graph.r")
source("./GB_Graph.r")
GB_Graph(M1=M1);
source("../Sources/MGM_Sampler.r")
source("./GB_Data.r")
source("../Sources/MGM_Evaluation.r")
source("../Sources/MGM_Combine.r")
source("../Sources/MGM_BIC.r")
source("../Sources/MGM_NSelect.r")
source("../Sources/MGM_misc.r")
source("./GB_Comp.r")
GB_Select(M1=M1,M2=M2,size=size);
source("./GB_Comp.r")
GB_Select(M1=M1,M2=M2,size=size);
GB_Ising(M1=M1,M2=M2,size=size);
GB_Gaussian(M1=M1,M2=M2,size=size);
GB_Glasso(M1=M1,M2=M2,size=size);
GB_Ising(M1=M1,M2=M2,size=size);
source("../Sources/MGM_NSelect.r")
GB_Ising(M1=M1,M2=M2,size=size);
GB_Glasso(M1=M1,M2=M2,size=size);
source("./GB_Comp.r")
GB_Glasso(M1=M1,M2=M2,size=size);
library(glasso)
GB_Glasso(M1=M1,M2=M2,size=size);
source("../Sources/MGM_misc.r")
edgeMGM_ratio<-process(st1="./Estimates/MGM/G", st2="MGM_ratio.txt",range=(1:M1) )
edgeGR<-process(st1="./Estimates/Glasso/G", st2="GR.txt",range=(1:M1) )
edgeMB_or<-process(st1="./Estimates/MB/G", st2="MB_or.txt",range=(1:M1) )
edgeI_or<-process(st1="./Estimates/Ising/G", st2="I_or.txt",range=(1:M1) )
BIC_count<-process(st1="./Estimates/BIC/G", st2="BICcount200.txt",range=(1:M1) )
BIC_rate<-process(st1="./Estimates/BIC/G", st2="BICrate200.txt",range=(1:M1) )
#Precision and recall rates
BIC_rate
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)
par(mfrow=c(1,1))
par(mar=c(4,3.6,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of total estimated edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Number of true edges", side=2, line=2.2,cex=2.2)
mtext('Edges between Gaussian and binary nodes', outer=T, line=-2.8,cex=2.3)
dev.off()
## plot of edges of the same type
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
pdf(file = paste("./plots/GB-same.pdf",sep=""), width=8, height=6)
par(mar=c(4,3.6,4,0.3)) # Margins
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38),
xlab="Number of total estimated edges", col="black", lwd=4, yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Number of true edges", side=2, line=2.2,cex=2.2)
mtext('Edges between same types of nodes', outer=T, line=-2.8,cex=2.3)
dev.off()
## Required library
library(glmnet)
library(glasso)
# Toy example
M1<-5 # Number of graphs
M2<-3 # Number of datasets for each graph
size<-200
source("../Sources/MGM_Graph.r")
source("./GB_Graph.r")
GB_Graph(M1=M1,lwb=0.3,upb=0.6);
source("../Sources/MGM_Sampler.r")
source("./GB_Data.r")
source("../Sources/MGM_Sampler.r")
source("./GB_Data.r")
GB_Data(M1=M1,M2=M2,size=400);
source("../Sources/MGM_Evaluation.r")
source("../Sources/MGM_Combine.r")
source("../Sources/MGM_BIC.r")
source("../Sources/MGM_NSelect.r")
source("../Sources/MGM_misc.r")
source("./GB_Comp.r")
GB_Select(M1=M1,M2=M2,size=size);
GB_Ising(M1=M1,M2=M2,size=size);
GB_Gaussian(M1=M1,M2=M2,size=size);
GB_Glasso(M1=M1,M2=M2,size=size);
source("../Sources/MGM_misc.r")
edgeMGM_ratio<-process(st1="./Estimates/MGM/G", st2="MGM_ratio.txt",range=(1:M1) )
edgeGR<-process(st1="./Estimates/Glasso/G", st2="GR.txt",range=(1:M1) )
edgeMB_or<-process(st1="./Estimates/MB/G", st2="MB_or.txt",range=(1:M1) )
edgeI_or<-process(st1="./Estimates/Ising/G", st2="I_or.txt",range=(1:M1) )
BIC_count<-process(st1="./Estimates/BIC/G", st2="BICcount.txt",range=(1:M1) )
BIC_rate<-process(st1="./Estimates/BIC/G", st2="BICrate.txt",range=(1:M1) )
#Precision and recall rates
BIC_rate
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)par(mfrow=c(1,1))
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeCheng[,2]~edgeCheng[,6],col="#00008B",lwd=4,lty="longdash")
lines(edgeGRaFo[,2]~edgeGRaFo[,6],col="#00008B90", lwd=4,lty="dashed")
lines(edgeLee[,2]~edgeLee[,6],col="#00008B70", lwd=4)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGV[,2]~edgeGV[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
## plot of edges of the same type
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
pdf(file = paste("./plots/GB-same.pdf",sep=""), width=8, height=6)
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38), lwd=4,
xlab="Number of Estimated Edges", col="black", yaxt='n', ylab='',  cex.lab=2.2,cex.axis=1.5)
lines(edgeG_same[1,]~edgeG_same[2,],col="#00008B", lwd=4,lty="longdash")
lines(edgeC_same[1,]~edgeC_same[2,],col="#00008B90",lwd=4,lty="dashed")
lines(edgeL_same[1,]~edgeL_same[2,],col="#00008B70", lwd=4)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Binary and Gaussian-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)par(mfrow=c(1,1))
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeCheng[,2]~edgeCheng[,6],col="#00008B",lwd=4,lty="longdash")
lines(edgeGRaFo[,2]~edgeGRaFo[,6],col="#00008B90", lwd=4,lty="dashed")
lines(edgeLee[,2]~edgeLee[,6],col="#00008B70", lwd=4)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGV[,2]~edgeGV[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
edgeMGM_ratio<-process(st1="./Estimates/MGM/G", st2="MGM_ratio.txt",range=(1:M1) )
edgeGR<-process(st1="./Estimates/Glasso/G", st2="GR.txt",range=(1:M1) )
edgeMB_or<-process(st1="./Estimates/MB/G", st2="MB_or.txt",range=(1:M1) )
edgeI_or<-process(st1="./Estimates/Ising/G", st2="I_or.txt",range=(1:M1) )
BIC_count<-process(st1="./Estimates/BIC/G", st2="BICcount.txt",range=(1:M1) )
BIC_rate<-process(st1="./Estimates/BIC/G", st2="BICrate.txt",range=(1:M1) )
#Precision and recall rates
BIC_rate
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeCheng[,2]~edgeCheng[,6],col="#00008B",lwd=4,lty="longdash")
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)par(mfrow=c(1,1))
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGV[,2]~edgeGV[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
## plot of edges of the same type
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
pdf(file = paste("./plots/GB-same.pdf",sep=""), width=8, height=6)
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38), lwd=4,
xlab="Number of Estimated Edges", col="black", yaxt='n', ylab='',  cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Binary and Gaussian-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)par(mfrow=c(1,1))
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
pdf(file = paste("./plots/GB-diff.pdf",sep=""), width=8, height=6)
par(mfrow=c(1,1))
par(mar=c(4.2,4,4,0.3)) # Margins
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
axis(2,cex.axis=1.5)
mtext("Num. of Correctly Est. Edges", side=2, line=2.2,cex=2.2)
mtext('Binary-Gaussian Edges', outer=T, line=-2.8,cex=2.3)
dev.off()
## Required library
library(glmnet)
library(glasso)
M1<-5 # Number of graphs
M2<-3 # Number of datasets for each graph
size<-200
source("../Sources/MGM_Graph.r")
source("./GB_Graph.r")
GB_Graph(M1=M1,lwb=0.3,upb=0.6,p=20);
source("../Sources/MGM_Sampler.r")
source("./GB_Data.r")
GB_Data(M1=M1,M2=M2,size=400);
GB_Data(M1=M1,M2=M2,size=400,p=20);
source("./GB_Data.r")
GB_Data(M1=M1,M2=M2,size=400,p=20);
source("../Sources/MGM_Evaluation.r")
source("../Sources/MGM_Combine.r")
source("../Sources/MGM_BIC.r")
source("../Sources/MGM_NSelect.r")
source("../Sources/MGM_misc.r")
source("./GB_Comp.r")
GB_Select(M1=M1,M2=M2,size=size);
source("./GB_Comp.r")
GB_Select(M1=M1,M2=M2,size=size);
GB_Ising(M1=M1,M2=M2,size=size);
GB_Gaussian(M1=M1,M2=M2,size=size);
GB_Glasso(M1=M1,M2=M2,size=size);
source("../Sources/MGM_misc.r")
edgeMGM_ratio<-process(st1="./Estimates/MGM/G", st2="MGM_ratio.txt",range=(1:M1) )
edgeGR<-process(st1="./Estimates/Glasso/G", st2="GR.txt",range=(1:M1) )
edgeMB_or<-process(st1="./Estimates/MB/G", st2="MB_or.txt",range=(1:M1) )
edgeI_or<-process(st1="./Estimates/Ising/G", st2="I_or.txt",range=(1:M1) )
BIC_count<-process(st1="./Estimates/BIC/G", st2="BICcount.txt",range=(1:M1) )
BIC_rate<-process(st1="./Estimates/BIC/G", st2="BICrate.txt",range=(1:M1) )
#Precision and recall rates
BIC_rate
plot(edgeMGM_ratio[,2]~edgeMGM_ratio[,6],type="l",xlim=c(0,150),ylim=c(0,22), lwd=4,
xlab="Number of Estimated Edges", yaxt='n', ylab='', cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_or[,2]~edgeMB_or[,6],col="#FF4040", lty="longdash", lwd=4)
lines(edgeGR[,2]~edgeGR[,6],col="#FF404090", lty="dashed",lwd=4)
lines(edgeI_or[,2]~edgeI_or[,6],col="#FF404070",  lwd=4)
points(BIC_count[2,2]~BIC_count[2,6],pch=c(17),cex=2)
edgeMGMR_same<-rbind(apply(edgeMGM_ratio[,c(1,4)],1,sum), apply(edgeMGM_ratio[,c(5,8)],1,sum))
edgeMB_same<-rbind(apply(edgeMB_or[,c(1,4)],1,sum), apply(edgeMB_or[,c(5,8)],1,sum))
edgeGR_same<-rbind(apply(edgeGR[,c(1,4)],1,sum), apply(edgeGR[,c(5,8)],1,sum))
edgeI_same<-rbind(apply(edgeI_or[,c(1,4)],1,sum), apply(edgeI_or[,c(5,8)],1,sum))
BIC_same<-rbind(apply(BIC_count[,c(1,4)],1,sum), apply(BIC_count[,c(5,8)],1,sum))
plot(edgeMGMR_same[1,]~edgeMGMR_same[2,],type="l",xlim=c(0,240),ylim=c(0,38), lwd=4,
xlab="Number of Estimated Edges", col="black", yaxt='n', ylab='',  cex.lab=2.2,cex.axis=1.5)
lines(edgeMB_same[1,]~edgeMB_same[2,], col="#FF4040",lty="longdash", lwd=4)
lines(edgeGR_same[1,]~edgeGR_same[2,],col="#FF404090", lty="dashed", lwd=4)
lines(edgeI_same[1,]~edgeI_same[2,],col="#FF404070", lwd=4)
points(BIC_same[1,2]~BIC_same[2,2],pch=c(17),cex=2)
## Required library
library(glmnet)
# Toy example
M1<-5 # Number of graphs
M2<-3 # Number of datasets for each graph
size<-200
source("../Sources/MGM_Graph.r")
source("./PB_Graph.r")
source("../Sources/MGM_Graph.r")
source("./PB_Graph.r")
